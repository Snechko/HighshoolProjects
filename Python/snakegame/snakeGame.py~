import pygame, sys
from pygame.math import Vector2
import random


class SNAKE:
    def __init__(self):
        self.body = [Vector2(3,1),Vector2(2,1),Vector2(1,1)]
        self.direction = Vector2(1,0)
        self.new_block = False
    
    def draw_snake(self):
        for block in self.body:
            block_rect = pygame.Rect(int(block.x*cell_size), int(block.y*cell_size), cell_size, cell_size)
            pygame.draw.rect(screen,(0,255,0), block_rect)
            
    def move_snake(self):
        if self.new_block == True:
            body_copy = self.body[:]
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body= body_copy[:]
            self.new_block = False
        else:
            body_copy = self.body[:-1]
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body= body_copy[:]

    def add_block(self):
        self.new_block = True

class FRUIT:
    def __init__(self):
        self.x = random.randint(0, cell_number - 1)
        self.y = random.randint(0, cell_number - 1)
        self.pos = Vector2(self.x,self.y)

    def draw_fruit(self):
        fruit_rect = pygame.Rect(int(self.pos.x*cell_size),int(self.pos.y*cell_size), cell_size, cell_size)
        pygame.draw.rect(screen,(255,0,0),fruit_rect) 

    def randomize(self):
        self.x = random.randint(0, cell_number - 1)
        self.y = random.randint(0, cell_number - 1)
        self.pos = Vector2(self.x,self.y)

class MAIN:
    def __init__(self):
        self.snake = SNAKE()
        self.fruit = FRUIT()
        self.cycle =((143,144,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10),
                    (142,133,132,123,122, 17, 16, 15, 14, 13, 12, 11),
                    (141,134,131,124,121, 18, 19, 20, 21, 22, 23, 24),
                    (140,135,130,125,120,115,114,109,108, 35, 34, 25),
                    (139,136,129,126,119,116,113,110,107, 36, 33, 26),
                    (138,137,128,127,118,117,112,111,106, 37, 32, 27),
                    ( 85, 86, 87, 88, 89, 90, 91, 92,105, 38, 31, 28),
                    ( 84, 83, 80, 97, 96, 95, 94, 93,104, 39, 30, 29),
                    ( 79, 80, 81, 98, 99,100,101,102,103, 40, 45, 46),
                    ( 78, 67, 66, 65, 64, 63, 62, 61, 60, 41, 44, 47),
                    ( 77, 68, 69, 70, 71, 56, 57, 58, 59, 42, 43, 48),
                    ( 76, 75, 74, 73, 72, 55, 54, 53, 52, 51, 50, 49))
        
        self.xpos = 2
        self.ypos = 0
        self.path_num = 1

    def update(self):
        self.hamiltonian_path()
        self.snake.move_snake()
        self.chack_collision()
        self.check_fail()
        #self.draw_score()
        self.fruit_overlap()

    def hamiltonian_path(self):
        if int(self.path_num + 1) == int(self.cycle[self.xpos + 1][self.ypos]):
            self.snake.direction = Vector2(1,0)
            self.xpos = self.xpos + 1
            self.path_num = self.path_num + 1
            print(self.path_num)
            print("right")
        if int(self.path_num + 1) == int(self.cycle[self.xpos][self.ypos + 1]):
            self.snake.direction = Vector2(0,1)
            self.ypos = self.ypos + 1
            self.path_num = self.path_num + 1
            print("down")
        if int(self.path_num + 1) == int(self.cycle[self.xpos - 1][self.ypos]):
            self.snake.direction = Vector2(-1,0)
            self.xpos = self.xpos - 1
            self.path_num = self.path_num + 1
            print("left")
        if int(self.path_num + 1) == int(self.cycle[self.xpos][self.ypos - 1]):
            self.snake.direction = Vector2(0,-1)
            self.ypos = self.ypos - 1
            self.path_num = self.path_num + 1
            print("up")
        else:
            print("yo mama gae")
            
    def draw_elements(self):
        self.fruit.draw_fruit()
        self.snake.draw_snake()

    def chack_collision(self):
        if self.fruit.pos == self.snake.body[0]:
            self.fruit.randomize()
            self.snake.add_block()

    def check_fail(self):
        if not cell_number > self.snake.body[0].x >= 0 or not cell_number > self.snake.body[0].y >= 0:
            self.game_over()

        for block in self.snake.body[1:]:
            if block == self.snake.body[0]:
                self.game_over()

    def game_over(self):
        pygame.quit()
        sys.exit()

    def fruit_overlap(self):
        for block in self.snake.body:
            if block == self.snake.body[:]:
                self.fruit.randomize()
    
    #def draw_score(self):
    #    score_text = str(len(self.snake.body)-3)
    #    score_surface = game_font.render(score_text, True,(255,0,0))
    #    score_x = int(10)
    #    score_y = int(10)
    #    score_rect = score_surface.get_rect(center = (score_x, score_y))
    #    screen.blit(score_surface, score_rect)


pygame.init()
cell_size = 40
cell_number = 16
screen = pygame.display.set_mode((cell_number*cell_size,cell_number*cell_size))
clock = pygame.time.Clock()
#game_font = pygame.font.Font("D:\Desktop\Snake\Pixelmania.ttf", 25)


main_game = MAIN()

SCREEN_UPDATE = pygame.USEREVENT
pygame.time.set_timer(SCREEN_UPDATE, 200)


while True:
    for event in pygame.event.get():
        if event.type==pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type==SCREEN_UPDATE:
            main_game.update()
        if event.type==pygame.KEYDOWN:
            if event.key==pygame.K_UP:
                if main_game.snake.direction.y != 1:
                    main_game.snake.direction=Vector2(0,-1)
            if event.key==pygame.K_DOWN:
                if main_game.snake.direction.y != -1:
                    main_game.snake.direction=Vector2(0,1)
            if event.key==pygame.K_RIGHT:
                if main_game.snake.direction.x != -1:
                    main_game.snake.direction=Vector2(1,0)
            if event.key==pygame.K_LEFT:
                if main_game.snake.direction.x != 1:
                    main_game.snake.direction=Vector2(-1,0)
            

    screen.fill((0,0,0))
    main_game.draw_elements()
    pygame.display.update()
    clock.tick(60)
